{
  "openapi": "3.0.0",
  "info": {
    "title": "PayStell API",
    "version": "1.0.0",
    "description": "Comprehensive API documentation for the PayStell backend service. This API provides endpoints for user management, payments, wallet verification, merchant operations, and more.",
    "contact": {
      "name": "PayStell Development Team",
      "email": "dev@paystell.com"
    },
    "license": {
      "name": "ISC",
      "url": "https://opensource.org/licenses/ISC"
    }
  },
  "servers": [
    {
      "url": "http://localhost:3000",
      "description": "Development server"
    },
    {
      "url": "https://api.paystell.com",
      "description": "Production server"
    }
  ],
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "description": "JWT token obtained from authentication endpoints"
      },
      "auth0Auth": {
        "type": "oauth2",
        "flows": {
          "authorizationCode": {
            "authorizationUrl": "https://your-auth0-domain.auth0.com/authorize",
            "tokenUrl": "https://your-auth0-domain.auth0.com/oauth/token",
            "scopes": {
              "read:users": "Read user information",
              "write:users": "Create and update users",
              "read:payments": "Read payment information",
              "write:payments": "Create and update payments"
            }
          }
        }
      }
    },
    "schemas": {
      "User": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Unique user identifier"
          },
          "name": {
            "type": "string",
            "description": "User full name"
          },
          "email": {
            "type": "string",
            "format": "email",
            "description": "User email address"
          },
          "role": {
            "type": "string",
            "enum": [
              "USER",
              "ADMIN",
              "MERCHANT"
            ],
            "description": "User role in the system"
          },
          "description": {
            "type": "string",
            "description": "User description"
          },
          "logoUrl": {
            "type": "string",
            "description": "URL to user logo"
          },
          "walletAddress": {
            "type": "string",
            "description": "User wallet address"
          },
          "isEmailVerified": {
            "type": "boolean",
            "description": "Email verification status"
          },
          "isWalletVerified": {
            "type": "boolean",
            "description": "Wallet verification status"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "User creation timestamp"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "User last update timestamp"
          }
        },
        "required": [
          "id",
          "name",
          "email",
          "role"
        ]
      },
      "CreateUserDTO": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "minLength": 2,
            "description": "User full name"
          },
          "email": {
            "type": "string",
            "format": "email",
            "description": "User email address"
          },
          "password": {
            "type": "string",
            "minLength": 8,
            "description": "User password"
          },
          "description": {
            "type": "string",
            "description": "User description"
          },
          "logoUrl": {
            "type": "string",
            "description": "URL to user logo"
          },
          "walletAddress": {
            "type": "string",
            "description": "User wallet address"
          }
        },
        "required": [
          "name",
          "email",
          "password"
        ]
      },
      "UpdateUserDTO": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "minLength": 2,
            "description": "User full name"
          },
          "email": {
            "type": "string",
            "format": "email",
            "description": "User email address"
          },
          "description": {
            "type": "string",
            "description": "User description"
          },
          "logoUrl": {
            "type": "string",
            "description": "URL to user logo"
          },
          "walletAddress": {
            "type": "string",
            "description": "User wallet address"
          }
        }
      },
      "Payment": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Unique payment identifier"
          },
          "paymentId": {
            "type": "string",
            "description": "Unique payment ID"
          },
          "amount": {
            "type": "number",
            "format": "decimal",
            "description": "Payment amount"
          },
          "status": {
            "type": "string",
            "enum": [
              "pending",
              "completed",
              "failed"
            ],
            "description": "Payment status"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Payment creation timestamp"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Payment last update timestamp"
          }
        },
        "required": [
          "id",
          "paymentId",
          "amount",
          "status"
        ]
      },
      "PaymentLink": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Unique payment link identifier"
          },
          "title": {
            "type": "string",
            "description": "Payment link title"
          },
          "description": {
            "type": "string",
            "description": "Payment link description"
          },
          "amount": {
            "type": "number",
            "format": "decimal",
            "description": "Payment amount"
          },
          "currency": {
            "type": "string",
            "description": "Payment currency"
          },
          "isActive": {
            "type": "boolean",
            "description": "Payment link active status"
          },
          "expiresAt": {
            "type": "string",
            "format": "date-time",
            "description": "Payment link expiration date"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Payment link creation timestamp"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Payment link last update timestamp"
          }
        },
        "required": [
          "id",
          "title",
          "amount",
          "currency"
        ]
      },
      "Merchant": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Unique merchant identifier"
          },
          "name": {
            "type": "string",
            "description": "Merchant name"
          },
          "email": {
            "type": "string",
            "format": "email",
            "description": "Merchant email"
          },
          "description": {
            "type": "string",
            "description": "Merchant description"
          },
          "logoUrl": {
            "type": "string",
            "description": "URL to merchant logo"
          },
          "website": {
            "type": "string",
            "description": "Merchant website URL"
          },
          "isActive": {
            "type": "boolean",
            "description": "Merchant active status"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Merchant creation timestamp"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Merchant last update timestamp"
          }
        },
        "required": [
          "id",
          "name",
          "email"
        ]
      },
      "CreateMerchantDTO": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Merchant name"
          },
          "email": {
            "type": "string",
            "format": "email",
            "description": "Merchant email"
          },
          "description": {
            "type": "string",
            "description": "Merchant description"
          },
          "logoUrl": {
            "type": "string",
            "description": "URL to merchant logo"
          },
          "website": {
            "type": "string",
            "description": "Merchant website URL"
          }
        },
        "required": [
          "name",
          "email"
        ]
      },
      "LoginRequest": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "description": "User email"
          },
          "password": {
            "type": "string",
            "description": "User password"
          }
        },
        "required": [
          "email",
          "password"
        ]
      },
      "Login2FARequest": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "description": "User email"
          },
          "password": {
            "type": "string",
            "description": "User password"
          },
          "token": {
            "type": "string",
            "minLength": 6,
            "maxLength": 6,
            "description": "2FA token"
          }
        },
        "required": [
          "email",
          "password",
          "token"
        ]
      },
      "AuthResponse": {
        "type": "object",
        "properties": {
          "accessToken": {
            "type": "string",
            "description": "JWT access token"
          },
          "refreshToken": {
            "type": "string",
            "description": "JWT refresh token"
          },
          "user": {
            "$ref": "#/components/schemas/User"
          }
        },
        "required": [
          "accessToken",
          "refreshToken",
          "user"
        ]
      },
      "WalletVerification": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Unique verification identifier"
          },
          "walletAddress": {
            "type": "string",
            "description": "Wallet address to verify"
          },
          "status": {
            "type": "string",
            "enum": [
              "pending",
              "verified",
              "failed"
            ],
            "description": "Verification status"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Verification creation timestamp"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Verification last update timestamp"
          }
        },
        "required": [
          "id",
          "walletAddress",
          "status"
        ]
      },
      "Referral": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Unique referral identifier"
          },
          "referrerId": {
            "type": "integer",
            "description": "ID of the user making the referral"
          },
          "referredId": {
            "type": "integer",
            "description": "ID of the referred user"
          },
          "status": {
            "type": "string",
            "enum": [
              "pending",
              "completed",
              "expired"
            ],
            "description": "Referral status"
          },
          "rewardAmount": {
            "type": "number",
            "description": "Reward amount for the referral"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Referral creation timestamp"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Referral last update timestamp"
          }
        },
        "required": [
          "id",
          "referrerId",
          "referredId",
          "status"
        ]
      },
      "Error": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "description": "Error type"
          },
          "message": {
            "type": "string",
            "description": "Error message"
          },
          "statusCode": {
            "type": "integer",
            "description": "HTTP status code"
          }
        },
        "required": [
          "error",
          "message"
        ]
      },
      "ValidationError": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "description": "Error type"
          },
          "message": {
            "type": "string",
            "description": "Error message"
          },
          "details": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "field": {
                  "type": "string",
                  "description": "Field name"
                },
                "message": {
                  "type": "string",
                  "description": "Validation message"
                }
              }
            },
            "description": "Validation error details"
          }
        },
        "required": [
          "error",
          "message"
        ]
      },
      "SuccessResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Success status"
          },
          "message": {
            "type": "string",
            "description": "Success message"
          },
          "data": {
            "type": "object",
            "description": "Response data"
          }
        },
        "required": [
          "success",
          "message"
        ]
      },
      "PaginatedResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "type": "object"
            },
            "description": "Array of items"
          },
          "pagination": {
            "type": "object",
            "properties": {
              "page": {
                "type": "integer",
                "description": "Current page number"
              },
              "limit": {
                "type": "integer",
                "description": "Items per page"
              },
              "total": {
                "type": "integer",
                "description": "Total number of items"
              },
              "totalPages": {
                "type": "integer",
                "description": "Total number of pages"
              }
            },
            "required": [
              "page",
              "limit",
              "total",
              "totalPages"
            ]
          }
        },
        "required": [
          "data",
          "pagination"
        ]
      }
    }
  },
  "security": [
    {
      "bearerAuth": []
    }
  ],
  "paths": {
    "/auth/register": {
      "post": {
        "summary": "Register a new user",
        "description": "Creates a new user account with email and password authentication",
        "tags": [
          "Authentication"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "minLength": 2,
                    "description": "User's full name"
                  },
                  "email": {
                    "type": "string",
                    "format": "email",
                    "description": "User's email address"
                  },
                  "password": {
                    "type": "string",
                    "minLength": 6,
                    "description": "User's password"
                  }
                },
                "required": [
                  "name",
                  "email",
                  "password"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User registered successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "409": {
            "description": "Conflict - user with this email already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/auth/login": {
      "post": {
        "summary": "Login user",
        "description": "Authenticates a user with email and password",
        "tags": [
          "Authentication"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Login successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/auth/login-2fa": {
      "post": {
        "summary": "Login with 2FA",
        "description": "Authenticates a user with email, password, and 2FA token",
        "tags": [
          "Authentication"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Login2FARequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Login successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - invalid credentials or 2FA token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/auth/callback": {
      "get": {
        "summary": "Auth0 callback",
        "description": "Handles Auth0 OAuth callback after successful authentication",
        "tags": [
          "Authentication"
        ],
        "responses": {
          "200": {
            "description": "Authentication successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/auth/refresh-token": {
      "post": {
        "summary": "Refresh access token",
        "description": "Refreshes the access token using a valid refresh token",
        "tags": [
          "Authentication"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Token refreshed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "accessToken": {
                      "type": "string",
                      "description": "New JWT access token"
                    },
                    "refreshToken": {
                      "type": "string",
                      "description": "New JWT refresh token"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - invalid or expired refresh token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/auth/logout": {
      "post": {
        "summary": "Logout user",
        "description": "Logs out the current user and invalidates their session",
        "tags": [
          "Authentication"
        ],
        "responses": {
          "200": {
            "description": "Logout successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Logged out successfully"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/auth/enable-2fa": {
      "post": {
        "summary": "Enable two-factor authentication",
        "description": "Enables 2FA for the authenticated user",
        "tags": [
          "Two-Factor Authentication"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "2FA enabled successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "2FA enabled successfully"
                    },
                    "secret": {
                      "type": "string",
                      "description": "Secret key for QR code generation"
                    },
                    "qrCode": {
                      "type": "string",
                      "description": "QR code URL for authenticator app"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/auth/disable-2fa": {
      "post": {
        "summary": "Disable two-factor authentication",
        "description": "Disables 2FA for the authenticated user",
        "tags": [
          "Two-Factor Authentication"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "2FA disabled successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "2FA disabled successfully"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/auth/verify-2fa": {
      "post": {
        "summary": "Verify two-factor authentication token",
        "description": "Verifies a 2FA token for the authenticated user",
        "tags": [
          "Two-Factor Authentication"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "token": {
                    "type": "string",
                    "minLength": 6,
                    "maxLength": 6,
                    "description": "6-digit 2FA token"
                  }
                },
                "required": [
                  "token"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "2FA token verified successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "2FA token verified successfully"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - invalid token format",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - authentication required or invalid token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/health": {
      "get": {
        "summary": "Health check",
        "description": "Basic health check endpoint to verify the server is running",
        "tags": [
          "Health"
        ],
        "responses": {
          "200": {
            "description": "Server is healthy",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "ok"
                    },
                    "message": {
                      "type": "string",
                      "example": "Server is running"
                    },
                    "timestamp": {
                      "type": "string",
                      "format": "date-time",
                      "description": "Current server timestamp"
                    }
                  },
                  "required": [
                    "status",
                    "message",
                    "timestamp"
                  ]
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/health/db": {
      "get": {
        "summary": "Database health check",
        "description": "Checks the database connection and returns the status",
        "tags": [
          "Health"
        ],
        "responses": {
          "200": {
            "description": "Database is healthy",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "OK"
                    },
                    "timestamp": {
                      "type": "integer",
                      "description": "Unix timestamp"
                    }
                  },
                  "required": [
                    "message",
                    "timestamp"
                  ]
                }
              }
            }
          },
          "503": {
            "description": "Database connection failed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "Error message describing the database issue"
                    },
                    "timestamp": {
                      "type": "integer",
                      "description": "Unix timestamp"
                    }
                  },
                  "required": [
                    "message",
                    "timestamp"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/health/dependencies": {
      "get": {
        "summary": "External dependencies health check",
        "description": "Checks the health of external dependencies like Stellar network",
        "tags": [
          "Health"
        ],
        "responses": {
          "200": {
            "description": "All dependencies are healthy",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "OK"
                    },
                    "dependencies": {
                      "type": "object",
                      "properties": {
                        "stellar": {
                          "type": "string",
                          "example": "OK"
                        }
                      },
                      "description": "Status of external dependencies"
                    },
                    "timestamp": {
                      "type": "integer",
                      "description": "Unix timestamp"
                    }
                  },
                  "required": [
                    "message",
                    "dependencies",
                    "timestamp"
                  ]
                }
              }
            }
          },
          "503": {
            "description": "One or more dependencies are unhealthy",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "Error message describing the dependency issue"
                    },
                    "dependencies": {
                      "type": "object",
                      "properties": {
                        "stellar": {
                          "type": "string",
                          "example": "FAIL"
                        }
                      },
                      "description": "Status of external dependencies"
                    },
                    "timestamp": {
                      "type": "integer",
                      "description": "Unix timestamp"
                    }
                  },
                  "required": [
                    "message",
                    "dependencies",
                    "timestamp"
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/merchants/profile": {
      "get": {
        "summary": "Get merchant profile",
        "description": "Retrieves the profile information of the authenticated merchant",
        "tags": [
          "Merchants"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Merchant profile retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Merchant"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Merchant profile not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Register a new merchant",
        "description": "Creates a new merchant account and profile",
        "tags": [
          "Merchants"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateMerchantDTO"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Merchant registered successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Merchant"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "409": {
            "description": "Conflict - merchant with this email already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update merchant profile",
        "description": "Updates the profile information of the authenticated merchant",
        "tags": [
          "Merchants"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Merchant name"
                  },
                  "description": {
                    "type": "string",
                    "description": "Merchant description"
                  },
                  "website": {
                    "type": "string",
                    "description": "Merchant website URL"
                  },
                  "logoUrl": {
                    "type": "string",
                    "description": "URL to merchant logo"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Merchant profile updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Merchant"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Merchant profile not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/merchants/logo": {
      "post": {
        "summary": "Upload merchant logo",
        "description": "Uploads a logo image for the authenticated merchant",
        "tags": [
          "Merchants"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "logo": {
                    "type": "string",
                    "format": "binary",
                    "description": "Logo image file (JPG, PNG, GIF)"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Logo uploaded successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Logo uploaded successfully"
                    },
                    "logoUrl": {
                      "type": "string",
                      "description": "URL to the uploaded logo"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - invalid file format or size",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "413": {
            "description": "Payload too large - file size exceeds limit",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete merchant logo",
        "description": "Removes the logo from the authenticated merchant's profile",
        "tags": [
          "Merchants"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Logo deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Logo deleted successfully"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Logo not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/paymentlink": {
      "post": {
        "summary": "Create a new payment link",
        "description": "Creates a new payment link for accepting payments",
        "tags": [
          "Payment Links"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "title": {
                    "type": "string",
                    "description": "Payment link title"
                  },
                  "description": {
                    "type": "string",
                    "description": "Payment link description"
                  },
                  "amount": {
                    "type": "number",
                    "minimum": 0.01,
                    "description": "Payment amount"
                  },
                  "currency": {
                    "type": "string",
                    "description": "Payment currency (e.g., USD, EUR)"
                  },
                  "expiresAt": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Payment link expiration date"
                  }
                },
                "required": [
                  "title",
                  "amount",
                  "currency"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Payment link created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentLink"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests - rate limit exceeded",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/paymentlink/user": {
      "get": {
        "summary": "Get payment links by user ID",
        "description": "Retrieves all payment links created by the authenticated user",
        "tags": [
          "Payment Links"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "default": 1
            },
            "description": "Page number for pagination"
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "default": 10
            },
            "description": "Number of items per page"
          },
          {
            "in": "query",
            "name": "status",
            "schema": {
              "type": "string",
              "enum": [
                "active",
                "inactive",
                "expired"
              ]
            },
            "description": "Filter by payment link status"
          }
        ],
        "responses": {
          "200": {
            "description": "Payment links retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PaymentLink"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/paymentlink/{id}": {
      "get": {
        "summary": "Get payment link by ID",
        "description": "Retrieves a specific payment link by its unique identifier",
        "tags": [
          "Payment Links"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "Payment link ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Payment link found successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentLink"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Payment link not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update payment link",
        "description": "Updates an existing payment link's information",
        "tags": [
          "Payment Links"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "Payment link ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "title": {
                    "type": "string",
                    "description": "Payment link title"
                  },
                  "description": {
                    "type": "string",
                    "description": "Payment link description"
                  },
                  "amount": {
                    "type": "number",
                    "minimum": 0.01,
                    "description": "Payment amount"
                  },
                  "currency": {
                    "type": "string",
                    "description": "Payment currency"
                  },
                  "expiresAt": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Payment link expiration date"
                  },
                  "isActive": {
                    "type": "boolean",
                    "description": "Whether the payment link is active"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Payment link updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentLink"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Payment link not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete payment link",
        "description": "Permanently deletes a payment link",
        "tags": [
          "Payment Links"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "Payment link ID"
          }
        ],
        "responses": {
          "204": {
            "description": "Payment link deleted successfully"
          },
          "401": {
            "description": "Unauthorized - authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Payment link not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/paymentlink/{id}/soft-delete": {
      "patch": {
        "summary": "Soft delete payment link",
        "description": "Marks a payment link as deleted without permanently removing it",
        "tags": [
          "Payment Links"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "Payment link ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Payment link soft deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentLink"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Payment link not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/payment": {
      "post": {
        "summary": "Create a new payment",
        "description": "Creates a new payment record in the system",
        "tags": [
          "Payments"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "amount": {
                    "type": "number",
                    "minimum": 0.01,
                    "description": "Payment amount"
                  },
                  "currency": {
                    "type": "string",
                    "description": "Payment currency (e.g., USD, EUR)"
                  },
                  "description": {
                    "type": "string",
                    "description": "Payment description"
                  },
                  "metadata": {
                    "type": "object",
                    "description": "Additional payment metadata"
                  }
                },
                "required": [
                  "amount",
                  "currency"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Payment created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Payment"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests - rate limit exceeded",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/payment/process": {
      "post": {
        "summary": "Process a payment with signature verification",
        "description": "Processes a payment with cryptographic signature verification for security",
        "tags": [
          "Payments"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "paymentId": {
                    "type": "string",
                    "description": "Unique payment identifier"
                  },
                  "signature": {
                    "type": "string",
                    "description": "Cryptographic signature for verification"
                  },
                  "publicKey": {
                    "type": "string",
                    "description": "Public key used for signature verification"
                  },
                  "amount": {
                    "type": "number",
                    "minimum": 0.01,
                    "description": "Payment amount"
                  },
                  "currency": {
                    "type": "string",
                    "description": "Payment currency"
                  }
                },
                "required": [
                  "paymentId",
                  "signature",
                  "publicKey",
                  "amount",
                  "currency"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Payment processed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Payment processed successfully"
                    },
                    "transactionHash": {
                      "type": "string",
                      "description": "Blockchain transaction hash"
                    },
                    "payment": {
                      "$ref": "#/components/schemas/Payment"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - validation error or invalid signature",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - signature verification failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests - rate limit exceeded",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/payment/{paymentId}": {
      "get": {
        "summary": "Get payment by ID",
        "description": "Retrieves payment details by its unique identifier",
        "tags": [
          "Payments"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "paymentId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Payment ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Payment found successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Payment"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - invalid payment ID format",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "404": {
            "description": "Payment not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/payment/{paymentId}/status": {
      "put": {
        "summary": "Update payment status",
        "description": "Updates the status of an existing payment",
        "tags": [
          "Payments"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "paymentId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Payment ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "status": {
                    "type": "string",
                    "enum": [
                      "pending",
                      "completed",
                      "failed"
                    ],
                    "description": "New payment status"
                  },
                  "reason": {
                    "type": "string",
                    "description": "Reason for status change (optional)"
                  }
                },
                "required": [
                  "status"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Payment status updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Payment"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Payment not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/payment/verify-transaction": {
      "post": {
        "summary": "Verify a transaction on the Stellar network",
        "description": "Verifies a transaction on the Stellar blockchain network",
        "tags": [
          "Payments"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "transactionHash": {
                    "type": "string",
                    "description": "Stellar transaction hash"
                  },
                  "paymentId": {
                    "type": "string",
                    "description": "Associated payment ID"
                  }
                },
                "required": [
                  "transactionHash",
                  "paymentId"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Transaction verified successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "verified": {
                      "type": "boolean",
                      "description": "Whether the transaction is verified"
                    },
                    "message": {
                      "type": "string",
                      "description": "Verification result message"
                    },
                    "transactionDetails": {
                      "type": "object",
                      "description": "Transaction details from Stellar network"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "404": {
            "description": "Transaction not found on Stellar network",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests - rate limit exceeded",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/payment/generate-nonce": {
      "get": {
        "summary": "Generate a secure nonce for payment requests",
        "description": "Generates a cryptographically secure nonce for payment request signing",
        "tags": [
          "Payments"
        ],
        "responses": {
          "200": {
            "description": "Nonce generated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "nonce": {
                      "type": "string",
                      "description": "Generated nonce value"
                    },
                    "expiresAt": {
                      "type": "string",
                      "format": "date-time",
                      "description": "Nonce expiration timestamp"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "Too many requests - rate limit exceeded",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/reports/transactions": {
      "get": {
        "summary": "Generate transaction report",
        "parameters": [
          {
            "in": "query",
            "name": "startDate",
            "schema": {
              "type": "string"
            },
            "description": "Start date for the report (ISO format)"
          },
          {
            "in": "query",
            "name": "endDate",
            "schema": {
              "type": "string"
            },
            "description": "End date for the report (ISO format)"
          },
          {
            "in": "query",
            "name": "status",
            "schema": {
              "type": "string",
              "enum": [
                "pending",
                "success",
                "failed"
              ]
            },
            "description": "Filter by transaction status"
          },
          {
            "in": "query",
            "name": "paymentMethod",
            "schema": {
              "type": "string",
              "enum": [
                "card",
                "bank_transfer",
                "wallet"
              ]
            },
            "description": "Filter by payment method"
          },
          {
            "in": "query",
            "name": "format",
            "schema": {
              "type": "string",
              "enum": [
                "json",
                "csv"
              ]
            },
            "description": "Response format"
          }
        ]
      }
    },
    "/users": {
      "post": {
        "summary": "Create a new user",
        "description": "Creates a new user account with the provided information",
        "tags": [
          "Users"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateUserDTO"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "409": {
            "description": "Conflict - user with this email already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "Get all users",
        "description": "Retrieves a list of all users in the system",
        "tags": [
          "Users"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "default": 1
            },
            "description": "Page number for pagination"
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "default": 10
            },
            "description": "Number of items per page"
          },
          {
            "in": "query",
            "name": "role",
            "schema": {
              "type": "string",
              "enum": [
                "USER",
                "ADMIN",
                "MERCHANT"
              ]
            },
            "description": "Filter users by role"
          }
        ],
        "responses": {
          "200": {
            "description": "Users retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/User"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/users/{id}": {
      "get": {
        "summary": "Get user by ID",
        "description": "Retrieves a specific user by their unique identifier",
        "tags": [
          "Users"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "User ID"
          }
        ],
        "responses": {
          "200": {
            "description": "User found successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update user",
        "description": "Updates an existing user's information",
        "tags": [
          "Users"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "User ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete user",
        "description": "Permanently deletes a user account",
        "tags": [
          "Users"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer"
            },
            "description": "User ID"
          }
        ],
        "responses": {
          "204": {
            "description": "User deleted successfully"
          },
          "401": {
            "description": "Unauthorized - authentication required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/wallet-verification/initiate": {
      "post": {
        "summary": "Initiate wallet verification",
        "description": "Initiates the wallet verification process by sending a verification email",
        "tags": [
          "Wallet Verification"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "walletAddress": {
                    "type": "string",
                    "description": "Stellar wallet address to verify"
                  },
                  "email": {
                    "type": "string",
                    "format": "email",
                    "description": "Email address to send verification to"
                  }
                },
                "required": [
                  "walletAddress",
                  "email"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Verification initiated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Verification email sent successfully"
                    },
                    "verificationId": {
                      "type": "string",
                      "description": "Unique verification identifier"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "409": {
            "description": "Conflict - verification already in progress",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/wallet-verification/verify": {
      "post": {
        "summary": "Verify wallet",
        "description": "Completes the wallet verification process using the verification token",
        "tags": [
          "Wallet Verification"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "verificationId": {
                    "type": "string",
                    "description": "Verification identifier from initiation"
                  },
                  "token": {
                    "type": "string",
                    "description": "Verification token from email"
                  },
                  "signature": {
                    "type": "string",
                    "description": "Cryptographic signature proving wallet ownership"
                  }
                },
                "required": [
                  "verificationId",
                  "token",
                  "signature"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Wallet verified successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "message": {
                      "type": "string",
                      "example": "Wallet verified successfully"
                    },
                    "walletAddress": {
                      "type": "string",
                      "description": "Verified wallet address"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - validation error or invalid token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - invalid verification token or signature",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Verification not found or expired",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    }
  },
  "tags": []
}